(()=>{"use strict";var __webpack_modules__={7370:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// UNUSED EXPORTS: Study\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(6075);\n;// CONCATENATED MODULE: ./src/clippingSurface/ClippingSurface.ts\n\n/**\n * ClippingPlaneにより切断したジオメトリの、切断面を描画するためのクラスです。\n *\n * 注意 : onBeforeRender関数やRenderループ内でstencilGroupの座標、スケール、回転を変更した場合、変更後にupdatePlane関数を明示的に呼び出してください。planeObjectの更新が行われず、表示が崩れます。\n */\nclass ClippingSurface extends three_module.Group {\n    /**\n     *コンストラクタ\n     * @param clippingPlane 表示される切断面\n     * @param geometry クリップされるジオメトリ\n     * @param option\n     */\n    constructor(clippingPlane, geometry, option) {\n        super();\n        /**\n         * planeObjectにplaneの座標をコピーする\n         */\n        this.updatePlane = () => {\n            this.plane.coplanarPoint(this.planeObject.position);\n            this.planeObject.lookAt(this.planeObject.position.x - this.plane.normal.x, this.planeObject.position.y - this.plane.normal.y, this.planeObject.position.z - this.plane.normal.z);\n        };\n        option = ClippingSurfaceOption.init(option, clippingPlane);\n        this.plane = clippingPlane;\n        const i = option.allPlanes.indexOf(clippingPlane);\n        this.stencilGroup = ClippingSurfaceUtil.createPlaneStencilGroup(geometry, clippingPlane, i + 1);\n        this.add(this.stencilGroup);\n        this.planeObject = ClippingSurface.createPlane(geometry, clippingPlane, option.allPlanes, i, option.planeMaterial);\n        this.planeObject.onBeforeRender = this.updatePlane;\n        this.add(this.planeObject);\n        this.frontFace = ClippingSurfaceUtil.initFrontFaceMesh(option.allPlanes, geometry, option.frontFaceMaterial);\n        this.stencilGroup.add(this.frontFace);\n        this.frontFace.visible = option.visibleSurface;\n    }\n    /**\n     * 着色用のプレーンジオメトリを生成する。\n     * @param geo\n     * @param clippingPlane\n     * @param otherPlanes\n     * @param index\n     * @param mat\n     */\n    static createPlane(geo, clippingPlane, otherPlanes, index, mat) {\n        geo.computeBoundingSphere();\n        const rad = geo.boundingSphere.radius;\n        const planeGeom = new three_module.PlaneGeometry(rad * 2, rad * 2);\n        if (mat == null) {\n            mat = new three_module.MeshStandardMaterial({\n                color: 0xe91e63,\n                metalness: 0.1,\n                roughness: 0.75,\n            });\n        }\n        ClippingSurfaceUtil.overrideStencilMaterial(mat, clippingPlane, otherPlanes);\n        //プレーンジオメトリオブジェクトを生成。\n        const po = new three_module.Mesh(planeGeom, mat);\n        po.onAfterRender = function (renderer) {\n            renderer.clearStencil();\n        };\n        po.renderOrder = index + 1.1;\n        return po;\n    }\n    //@ts-ignore : TODO update\n    get rotation() {\n        return this.stencilGroup.rotation;\n    }\n    //@ts-ignore : TODO update\n    set rotation(val) {\n        this.stencilGroup.rotation.copy(val);\n    }\n}\nclass ClippingSurfaceUtil {\n    /**\n     * ステンシル設定がされたFrontFace, BackFaceのグループを生成する。\n     * @param geometry\n     * @param plane\n     * @param renderOrder\n     */\n    static createPlaneStencilGroup(geometry, plane, renderOrder) {\n        const group = new three_module.Group();\n        const base = new three_module.MeshBasicMaterial();\n        base.depthWrite = false;\n        base.depthTest = false;\n        base.colorWrite = false;\n        base.stencilWrite = true;\n        base.stencilFunc = three_module.AlwaysStencilFunc;\n        // back faces\n        const backMesh = new three_module.Mesh(geometry, this.getStencilMat(base, three_module.BackSide, plane, three_module.IncrementWrapStencilOp));\n        backMesh.renderOrder = renderOrder;\n        group.add(backMesh);\n        // front faces\n        const frontMesh = new three_module.Mesh(geometry, this.getStencilMat(base, three_module.FrontSide, plane, three_module.DecrementWrapStencilOp));\n        frontMesh.renderOrder = renderOrder;\n        group.add(frontMesh);\n        return group;\n    }\n    /**\n     * マテリアルにstencilFail時の処理を一括で指定する。\n     * @param mat\n     * @param val\n     */\n    static setStencilOp(mat, val) {\n        mat.stencilFail = val;\n        mat.stencilZFail = val;\n        mat.stencilZPass = val;\n    }\n    /**\n     * ステンシルグループ用のマテリアルを生成する。\n     * @param base\n     * @param side\n     * @param plane\n     * @param stencilOp\n     */\n    static getStencilMat(base, side, plane, stencilOp) {\n        const mat = base.clone();\n        mat.side = side;\n        mat.clippingPlanes = [plane];\n        ClippingSurfaceUtil.setStencilOp(mat, stencilOp);\n        return mat;\n    }\n    /**\n     * planeObject用マテリアルに必須となる設定を、既存のマテリアルに対して上書きする。\n     * @param mat\n     * @param clippingPlane\n     * @param otherPlanes\n     */\n    static overrideStencilMaterial(mat, clippingPlane, otherPlanes) {\n        mat.clippingPlanes = otherPlanes.filter((p) => p !== clippingPlane);\n        mat.stencilWrite = true;\n        mat.stencilRef = 0;\n        mat.stencilFunc = three_module.NotEqualStencilFunc;\n        ClippingSurfaceUtil.setStencilOp(mat, three_module.ReplaceStencilOp);\n    }\n    /**\n     * 切り取られたジオメトリの表面を生成する\n     * @param planes\n     * @param geometry\n     * @param mat\n     */\n    static initFrontFaceMesh(planes, geometry, mat) {\n        if (mat == null) {\n            mat = new three_module.MeshStandardMaterial({\n                color: 0xffc107,\n                metalness: 0.1,\n                roughness: 0.75,\n            });\n        }\n        this.overrideFrontFaceMaterial(mat, planes);\n        const clippedColorFront = new three_module.Mesh(geometry, mat);\n        clippedColorFront.renderOrder = planes.length * 2;\n        return clippedColorFront;\n    }\n    static overrideFrontFaceMaterial(mat, planes) {\n        mat.clippingPlanes = planes;\n    }\n}\nclass ClippingSurfaceOption {\n    static init(option, plane) {\n        if (option == null)\n            option = {};\n        if (option.allPlanes == null || option.allPlanes.length === 0) {\n            option.allPlanes = [plane];\n        }\n        if (option.visibleSurface == null) {\n            option.visibleSurface = false;\n        }\n        return option;\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(8012);\n;// CONCATENATED MODULE: ./src/Common.ts\n\n\nclass Common {\n    static initScene() {\n        const scene = new three_module.Scene();\n        return scene;\n    }\n    static initLight(scene) {\n        const ambientLight = new three_module.AmbientLight(0xffffff, 1.0);\n        scene.add(ambientLight);\n        return ambientLight;\n    }\n    static initCamera(scene, W, H, near = 1, far = 400) {\n        const camera = new three_module.PerspectiveCamera(45, W / H, near, far);\n        camera.position.set(0, 0, 100);\n        camera.updateMatrixWorld(false);\n        scene.add(camera);\n        return camera;\n    }\n    static initControl(camera, render) {\n        let domElement;\n        if (render) {\n            domElement = render.domElement;\n        }\n        const control = new OrbitControls/* OrbitControls */.z(camera, domElement);\n        control.update();\n        return control;\n    }\n    static initRenderer(W, H, color = 0x000000, id = "webgl-canvas", antialias = true) {\n        const renderer = new three_module.WebGLRenderer({\n            canvas: document.getElementById(id),\n            antialias: antialias,\n        });\n        renderer.setClearColor(new three_module.Color(color));\n        renderer.setSize(W, H);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        return renderer;\n    }\n    static initHelper(scene) {\n        const axesHelper = new three_module.AxesHelper(30);\n        scene.add(axesHelper);\n    }\n    static render(control, renderer, scene, camera, onBeforeRender) {\n        const rendering = () => {\n            if (onBeforeRender) {\n                onBeforeRender();\n            }\n            control.update();\n            renderer.render(scene, camera);\n            requestAnimationFrame(rendering);\n        };\n        rendering();\n    }\n    static addRendererInfo() {\n        const info = document.createElement("div");\n        document.body.appendChild(info);\n        return info;\n    }\n    static updateRendererInfo(div, info) {\n        div.innerText = JSON.stringify(info);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/StudyStencil.ts\n\n\n\nclass Study {\n    static initPlanes() {\n        return [\n            new three_module.Plane(new three_module.Vector3(-1, 0, 0), 0),\n            new three_module.Plane(new three_module.Vector3(0, -1, 0), 0),\n            new three_module.Plane(new three_module.Vector3(0, 0, -1), 0),\n        ];\n    }\n    init() {\n        this.scene = new three_module.Scene();\n        this.camera = Common.initCamera(this.scene, Study.W, Study.H);\n        this.camera.position.set(2, 2, 2);\n        Common.initLight(this.scene);\n        var dirLight = new three_module.DirectionalLight(0xffffff, 1);\n        dirLight.position.set(5, 10, 7.5);\n        this.scene.add(dirLight);\n        this.planes = Study.initPlanes();\n        const geometry = new three_module.TorusKnotGeometry(0.4, 0.15, 220, 60);\n        const surfaces = [];\n        //トーラスジオメトリをコピーしたグループを作る。\n        this.planes.forEach((plane) => {\n            const group = new ClippingSurface(plane, geometry, {\n                allPlanes: this.planes,\n            });\n            this.scene.add(group);\n            surfaces.push(group);\n        });\n        this.renderer = Common.initRenderer(Study.W, Study.H, 0x263238);\n        this.renderer.localClippingEnabled = true;\n        const controls = Common.initControl(this.camera, this.renderer);\n        Common.render(controls, this.renderer, this.scene, this.camera, () => {\n            surfaces.forEach((surface) => {\n                surface.rotation.x += 0.01;\n                surface.updatePlane();\n            });\n        });\n    }\n}\nStudy.W = 640.0;\nStudy.H = 480.0;\nwindow.onload = () => {\n    const study = new Study();\n    study.init();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7370\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(U.exports,U,U.exports,__webpack_require__),U.loaded=!0,U.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,F,U,B)=>{if(!F){var e=1/0;for(g=0;g<deferred.length;g++){for(var[F,U,B]=deferred[g],s=!0,n=0;n<F.length;n++)(!1&B||e>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](F[n])))?F.splice(n--,1):(s=!1,B<e&&(e=B));if(s){deferred.splice(g--,1);var l=U();void 0!==l&&(Q=l)}}return Q}B=B||0;for(var g=deferred.length;g>0&&deferred[g-1][2]>B;g--)deferred[g]=deferred[g-1];deferred[g]=[F,U,B]},__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),__webpack_require__.j=273,(()=>{var Q={273:0};__webpack_require__.O.j=F=>0===Q[F];var F=(F,U)=>{var B,e,[s,n,l]=U,g=0;if(s.some((F=>0!==Q[F]))){for(B in n)__webpack_require__.o(n,B)&&(__webpack_require__.m[B]=n[B]);if(l)var c=l(__webpack_require__)}for(F&&F(U);g<s.length;g++)e=s[g],__webpack_require__.o(Q,e)&&Q[e]&&Q[e][0](),Q[e]=0;return __webpack_require__.O(c)},U=self.webpackChunkthreejs_lab=self.webpackChunkthreejs_lab||[];U.forEach(F.bind(null,0)),U.push=F.bind(null,U.push.bind(U))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(7370)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();