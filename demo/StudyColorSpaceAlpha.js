(()=>{"use strict";var __webpack_modules__={936:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// UNUSED EXPORTS: Study\n\n// EXTERNAL MODULE: ./node_modules/lil-gui/dist/lil-gui.esm.js\nvar lil_gui_esm = __webpack_require__(638);\n// EXTERNAL MODULE: ./node_modules/three/build/three.webgpu.js\nvar three_webgpu = __webpack_require__(6293);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(6753);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(3580);\n;// CONCATENATED MODULE: ./src/Common.ts\n\n\nclass Common {\n    static initScene() {\n        const scene = new three_module.Scene();\n        return scene;\n    }\n    static initLight(scene) {\n        const ambientLight = new three_module.AmbientLight(0xffffff, 1.0);\n        scene.add(ambientLight);\n        return ambientLight;\n    }\n    static initCamera(scene, W, H, near = 1, far = 400) {\n        const camera = new three_module.PerspectiveCamera(45, W / H, near, far);\n        camera.position.set(0, 0, 100);\n        camera.updateMatrixWorld(false);\n        scene.add(camera);\n        return camera;\n    }\n    static initControl(camera, render) {\n        let domElement;\n        if (render) {\n            domElement = render.domElement;\n        }\n        const control = new OrbitControls/* OrbitControls */.N(camera, domElement);\n        control.update();\n        return control;\n    }\n    static initRenderer(W, H, color = 0x000000, id = "webgl-canvas", antialias = true) {\n        const renderer = new three_module.WebGLRenderer({\n            canvas: document.getElementById(id),\n            antialias: antialias,\n        });\n        this.initRendererSettings(renderer, color, W, H);\n        return renderer;\n    }\n    static initRendererSettings(renderer, color, W, H) {\n        renderer.setClearColor(new three_module.Color(color));\n        renderer.setSize(W, H);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        console.log("three.js revision: ", three_module.REVISION);\n    }\n    static initHelper(scene) {\n        const axesHelper = new three_module.AxesHelper(30);\n        scene.add(axesHelper);\n    }\n    static render(control, renderer, scene, camera, onBeforeRender) {\n        const rendering = () => {\n            if (onBeforeRender) {\n                onBeforeRender();\n            }\n            control.update();\n            renderer.render(scene, camera);\n            requestAnimationFrame(rendering);\n        };\n        rendering();\n    }\n    static addRendererInfo() {\n        const info = document.createElement("div");\n        document.body.appendChild(info);\n        return info;\n    }\n    static updateRendererInfo(div, info) {\n        div.innerText = JSON.stringify(info);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/CommonWebGPU.ts\n\n\nclass CommonWebGPU_Common {\n    static initScene() {\n        const scene = new three_webgpu/* Scene */.Z58();\n        return scene;\n    }\n    static initLight(scene) {\n        const ambientLight = new three_webgpu/* AmbientLight */.$p8(0xffffff, 1.0);\n        scene.add(ambientLight);\n        return ambientLight;\n    }\n    static initCamera(scene, W, H, near = 1, far = 400) {\n        const camera = new three_webgpu/* PerspectiveCamera */.ubm(45, W / H, near, far);\n        camera.position.set(0, 0, 100);\n        camera.updateMatrixWorld(false);\n        scene.add(camera);\n        return camera;\n    }\n    static initControl(camera, render) {\n        let domElement;\n        if (render) {\n            domElement = render.domElement;\n        }\n        const control = new OrbitControls/* OrbitControls */.N(camera, domElement);\n        control.update();\n        return control;\n    }\n    static initWebGPURenderer(W, H, color = 0x000000, id = "webgl-canvas", antialias = true) {\n        const renderer = new three_webgpu/* WebGPURenderer */.uV1({\n            canvas: document.getElementById(id),\n            antialias: antialias,\n        });\n        this.initRendererSettings(renderer, color, W, H);\n        return renderer;\n    }\n    static initRendererSettings(renderer, color, W, H) {\n        renderer.setClearColor(new three_webgpu/* Color */.Q1f(color));\n        renderer.setSize(W, H);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        console.log("three.js revision: ", three_webgpu/* REVISION */.sPf);\n    }\n    static initHelper(scene) {\n        const axesHelper = new three_webgpu/* AxesHelper */.IzY(30);\n        scene.add(axesHelper);\n    }\n    static render(control, renderer, scene, camera, onBeforeRender) {\n        const rendering = () => {\n            if (onBeforeRender) {\n                onBeforeRender();\n            }\n            control.update();\n            renderer.renderAsync(scene, camera);\n            requestAnimationFrame(rendering);\n        };\n        rendering();\n    }\n    static addRendererInfo() {\n        const info = document.createElement("div");\n        document.body.appendChild(info);\n        return info;\n    }\n    static updateRendererInfo(div, info) {\n        div.innerText = JSON.stringify(info);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/StudyColorSpaceAlpha.ts\n\n\n\n\n/**\n * WebGLとWebGPUでのopacity値の設定の違いを確認するためのサンプルコード\n * - WebGLではopacityプロパティはガンマ補正(2.2)が適用される\n * - WebGPUではリニア値が適用される。\n *\n * Color.setRGB(alpha, 0,0,"srgb")を利用することでガンマ補正後のアルファ値が取得できるので、\n * WebGPU環境でWebGLやPhotoshopなどの環境の表示を再現する場合はこちらを利用する。\n */\nclass Study {\n    static initWebGLScene() {\n        const scene = Common.initScene();\n        Common.initLight(scene);\n        const camera = Common.initCamera(scene, Study.W, Study.H);\n        return { scene, camera };\n    }\n    static initWebGPUScene() {\n        const scene = CommonWebGPU_Common.initScene();\n        CommonWebGPU_Common.initLight(scene);\n        const camera = CommonWebGPU_Common.initCamera(scene, Study.W, Study.H);\n        return { scene, camera };\n    }\n    constructor() {\n        /**\n         * CanvasElementを、そのCanvasElementを内包したfigure要素に置き換える。figure要素にはfigcaption要素が追加される。\n         * @param canvas\n         * @param figure\n         */\n        this.addFigure = (canvas, figure) => {\n            const figureElement = document.createElement("figure");\n            const figCaption = document.createElement("figcaption");\n            figCaption.textContent = figure;\n            figureElement.appendChild(canvas);\n            figureElement.appendChild(figCaption);\n            document.body.appendChild(figureElement);\n        };\n        this.initGUI = (materialBasic, materialBasicWebGPU, rendererGL, rendererWebGPU) => {\n            const materials = [materialBasic, materialBasicWebGPU];\n            const gui = new lil_gui_esm/* GUI */.cL();\n            const materialColor = {\n                r: 0.5,\n                g: 0.5,\n                b: 0.5,\n            };\n            const materialAlpha = {\n                a: 1,\n                useGamma: false,\n            };\n            const colorSpaceSetting = {\n                colorSpace: rendererGL.outputColorSpace,\n                workspace: three_webgpu/* ColorManagement */.ppV.workingColorSpace,\n            };\n            const onChangeColor = () => {\n                materials.forEach((m) => {\n                    m.color.setRGB(materialColor.r, materialColor.g, materialColor.b);\n                });\n            };\n            gui.add(materialColor, "r", 0, 1).onChange(onChangeColor);\n            gui.add(materialColor, "g", 0, 1).onChange(onChangeColor);\n            gui.add(materialColor, "b", 0, 1).onChange(onChangeColor);\n            const updateAlpha = () => {\n                materials.forEach((m) => {\n                    m.opacity = materialAlpha.a;\n                });\n            };\n            gui.add(materialAlpha, "a", 0, 1).onChange(updateAlpha);\n            const updateColorSpace = () => {\n                rendererGL.outputColorSpace = rendererWebGPU.outputColorSpace =\n                    colorSpaceSetting.colorSpace;\n                three_webgpu/* ColorManagement */.ppV.workingColorSpace = colorSpaceSetting.workspace;\n            };\n            gui\n                .add(colorSpaceSetting, "colorSpace", ["srgb", "srgb-linear"])\n                .onChange(updateColorSpace);\n            gui\n                .add(colorSpaceSetting, "workspace", ["srgb-linear", "display-p3-linear"])\n                .onChange(updateColorSpace);\n            onChangeColor();\n            updateAlpha();\n            updateColorSpace();\n        };\n        // const scene = Common.initScene();\n        // Common.initLight(scene);\n        // const camera = Common.initCamera(scene, Study.W, Study.H);\n        const glScnene = Study.initWebGLScene();\n        const wgpuScene = Study.initWebGPUScene();\n        const canvasGL = document.createElement("canvas");\n        canvasGL.id = "webGPU-canvas";\n        document.body.appendChild(canvasGL);\n        document.body.style.display = "flex"; // bodyの子要素を横並びにする\n        const renderer = Common.initRenderer(Study.W, Study.H, 0x000000);\n        const rendererGPU = CommonWebGPU_Common.initWebGPURenderer(Study.W, Study.H, 0x000000, "webGPU-canvas");\n        const matGL = this.initObject(glScnene.scene);\n        const matGPU = this.initObject(wgpuScene.scene);\n        this.addFigure(renderer.domElement, "WebGL");\n        this.addFigure(rendererGPU.domElement, "WebGPU");\n        this.initGUI(matGL, matGPU, renderer, rendererGPU);\n        const rendering = () => {\n            renderer.render(glScnene.scene, glScnene.camera);\n            rendererGPU.renderAsync(wgpuScene.scene, wgpuScene.camera);\n            requestAnimationFrame(rendering);\n        };\n        rendering();\n    }\n    initObject(scene) {\n        const geo = new three_webgpu/* PlaneGeometry */.bdM(30, 30);\n        const mat = new three_webgpu/* MeshBasicMaterial */.V9B();\n        mat.color.setRGB(1, 0, 0);\n        mat.transparent = true;\n        const mesh = new three_webgpu/* Mesh */.eaF(geo, mat);\n        scene.add(mesh);\n        return mat;\n    }\n}\nStudy.W = 640;\nStudy.H = 480;\nwindow.onload = () => {\n    const study = new Study();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///936\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var e=1/0;for(g=0;g<deferred.length;g++){for(var[U,F,B]=deferred[g],n=!0,s=0;s<U.length;s++)(!1&B||e>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[s])))?U.splice(s--,1):(n=!1,B<e&&(e=B));if(n){deferred.splice(g--,1);var c=F();void 0!==c&&(Q=c)}}return Q}B=B||0;for(var g=deferred.length;g>0&&deferred[g-1][2]>B;g--)deferred[g]=deferred[g-1];deferred[g]=[U,F,B]},__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),__webpack_require__.j=29,(()=>{var Q={29:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,e,[n,s,c]=F,g=0;if(n.some((U=>0!==Q[U]))){for(B in s)__webpack_require__.o(s,B)&&(__webpack_require__.m[B]=s[B]);if(c)var x=c(__webpack_require__)}for(U&&U(F);g<n.length;g++)e=n[g],__webpack_require__.o(Q,e)&&Q[e]&&Q[e][0](),Q[e]=0;return __webpack_require__.O(x)},F=self.webpackChunkthreejs_lab=self.webpackChunkthreejs_lab||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[121],(()=>__webpack_require__(936)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();