(()=>{"use strict";var __webpack_modules__={5017:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// UNUSED EXPORTS: StudyMergedGeometryInteractive\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(6075);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/utils/BufferGeometryUtils.js\nvar BufferGeometryUtils = __webpack_require__(6993);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(8012);\n;// CONCATENATED MODULE: ./src/Common.ts\n\n\nclass Common {\n    static initScene() {\n        const scene = new three_module.Scene();\n        return scene;\n    }\n    static initLight(scene) {\n        const ambientLight = new three_module.AmbientLight(0xffffff, 1.0);\n        scene.add(ambientLight);\n        return ambientLight;\n    }\n    static initCamera(scene, W, H, near = 1, far = 400) {\n        const camera = new three_module.PerspectiveCamera(45, W / H, near, far);\n        camera.position.set(0, 0, 100);\n        camera.updateMatrixWorld(false);\n        scene.add(camera);\n        return camera;\n    }\n    static initControl(camera, render) {\n        let domElement;\n        if (render) {\n            domElement = render.domElement;\n        }\n        const control = new OrbitControls/* OrbitControls */.z(camera, domElement);\n        control.update();\n        return control;\n    }\n    static initRenderer(W, H, color = 0x000000, id = "webgl-canvas", antialias = true) {\n        const renderer = new three_module.WebGLRenderer({\n            canvas: document.getElementById(id),\n            antialias: antialias,\n        });\n        renderer.setClearColor(new three_module.Color(color));\n        renderer.setSize(W, H);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        console.log("three.js revision: ", three_module.REVISION);\n        return renderer;\n    }\n    static initHelper(scene) {\n        const axesHelper = new three_module.AxesHelper(30);\n        scene.add(axesHelper);\n    }\n    static render(control, renderer, scene, camera, onBeforeRender) {\n        const rendering = () => {\n            if (onBeforeRender) {\n                onBeforeRender();\n            }\n            control.update();\n            renderer.render(scene, camera);\n            requestAnimationFrame(rendering);\n        };\n        rendering();\n    }\n    static addRendererInfo() {\n        const info = document.createElement("div");\n        document.body.appendChild(info);\n        return info;\n    }\n    static updateRendererInfo(div, info) {\n        div.innerText = JSON.stringify(info);\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/libs/stats.module.js\nvar stats_module = __webpack_require__(2304);\n;// CONCATENATED MODULE: ./src/MergedGeometryStudy.ts\n\n\n\nclass MergedGeometryStudy {\n    constructor() {\n        this.initStats();\n        const scene = Common.initScene();\n        const camera = Common.initCamera(scene, MergedGeometryStudy.W, MergedGeometryStudy.H);\n        this.renderer = Common.initRenderer(MergedGeometryStudy.W, MergedGeometryStudy.H);\n        const object = this.initMesh(scene);\n        const info = Common.addRendererInfo();\n        this.render(object, info, this.renderer, scene, camera);\n    }\n    initStats() {\n        this.stats = new stats_module/* default */.Z();\n        this.stats.showPanel(0);\n        document.body.appendChild(this.stats.dom);\n    }\n    initMesh(scene) {\n        // Override me\n        return new three_module.Group();\n    }\n    render(mergedMesh, infoContainer, renderer, scene, camera) {\n        const rendering = () => {\n            mergedMesh.rotation.x += 0.01;\n            mergedMesh.rotation.y += 0.01;\n            mergedMesh.rotation.z += 0.01;\n            this.stats.begin();\n            renderer.render(scene, camera);\n            this.stats.end();\n            Common.updateRendererInfo(infoContainer, renderer.info.render);\n            requestAnimationFrame(rendering);\n        };\n        rendering();\n    }\n}\nMergedGeometryStudy.W = 1280;\nMergedGeometryStudy.H = 800;\n\n;// CONCATENATED MODULE: ./src/StudyMergedGeometryInteractive.ts\n\n\n\n\nclass StudyMergedGeometryInteractive extends MergedGeometryStudy {\n    constructor() {\n        super();\n        this.raycaster = new three_module.Raycaster();\n        this.mousePoint = new three_module.Vector2();\n        this.onPointerMove = (e) => {\n            this.mousePoint.x =\n                (e.clientX / parseInt(this.renderer.domElement.style.width)) * 2 - 1;\n            this.mousePoint.y =\n                -(e.clientY / parseInt(this.renderer.domElement.style.height)) * 2 + 1;\n        };\n        document.addEventListener("pointermove", this.onPointerMove);\n    }\n    initMesh(scene) {\n        const geometryArray = [];\n        const size = 1;\n        const margin = 0.3;\n        const pitch = size + margin;\n        const numCube = 25;\n        const offset = (numCube * pitch) / 2;\n        const generateCube = (x, y, z, idCount) => {\n            const geometry = new three_module.BoxGeometry();\n            const positions = geometry.getAttribute("position");\n            const count = positions.count;\n            geometry.setAttribute("color", new three_module.BufferAttribute(new Float32Array(count * 4), 4));\n            geometry.setAttribute("originalColor", new three_module.BufferAttribute(new Float32Array(count * 4), 4));\n            geometry.setAttribute("mesh_id", new three_module.BufferAttribute(new Float32Array(count), 1));\n            const colors = geometry.getAttribute("color");\n            const originalColor = geometry.getAttribute("originalColor");\n            const idAttribute = geometry.getAttribute("mesh_id");\n            for (let i = 0; i < count; i++) {\n                positions.setXYZ(i, positions.getX(i) + x * pitch - offset, positions.getY(i) + y * pitch - offset, positions.getZ(i) + z * pitch - offset);\n                colors.setXYZW(i, x / numCube, y / numCube, z / numCube, 0.1);\n                originalColor.setXYZW(i, x / numCube, y / numCube, z / numCube, 0.1);\n                idAttribute.setX(i, idCount);\n            }\n            geometryArray.push(geometry);\n        };\n        let idCounter = 0;\n        for (let x = 0; x < numCube; x++) {\n            for (let y = 0; y < numCube; y++) {\n                for (let z = 0; z < numCube; z++) {\n                    generateCube(x, y, z, idCounter);\n                    idCounter++;\n                }\n            }\n        }\n        const mergedMesh = new three_module.Mesh((0,BufferGeometryUtils/* mergeGeometries */.n4)(geometryArray), new three_module.MeshBasicMaterial({ transparent: true, vertexColors: true }));\n        scene.add(mergedMesh);\n        return mergedMesh;\n    }\n    render(mergedMesh, infoContainer, renderer, scene, camera) {\n        const rendering = () => {\n            var _a, _b;\n            const speed = 0.01;\n            mergedMesh.rotation.x += speed;\n            mergedMesh.rotation.y += speed;\n            mergedMesh.rotation.z += speed;\n            mergedMesh.updateMatrix();\n            this.stats.begin();\n            (_a = this.raycaster) === null || _a === void 0 ? void 0 : _a.setFromCamera(this.mousePoint, camera);\n            const intersects = (_b = this.raycaster) === null || _b === void 0 ? void 0 : _b.intersectObject(mergedMesh, false);\n            if ((intersects === null || intersects === void 0 ? void 0 : intersects.length) > 0) {\n                this.updateIntersect(intersects[0], mergedMesh.geometry);\n            }\n            renderer.render(scene, camera);\n            this.stats.end();\n            Common.updateRendererInfo(infoContainer, renderer.info.render);\n            requestAnimationFrame(rendering);\n        };\n        rendering();\n    }\n    updateIntersect(intersect, geo) {\n        const idAttribute = geo.getAttribute("mesh_id");\n        const face = intersect.face;\n        const meshID = idAttribute.getX(face.a);\n        if (idAttribute.getX(face.a) !== idAttribute.getX(face.b) ||\n            idAttribute.getX(face.a) !== idAttribute.getX(face.c)) {\n            console.log(idAttribute.getX(face.a), idAttribute.getX(face.b), idAttribute.getX(face.c));\n        }\n        const colorAttribute = geo.getAttribute("color");\n        const originalColorAttribute = geo.getAttribute("originalColor");\n        const count = idAttribute.count;\n        for (let i = 0; i < count; i++) {\n            if (idAttribute.getX(i) === meshID) {\n                colorAttribute.setXYZW(i, 1, 1, 1, 1);\n            }\n            else {\n                colorAttribute.setXYZW(i, originalColorAttribute.getX(i), originalColorAttribute.getY(i), originalColorAttribute.getZ(i), originalColorAttribute.getW(i));\n            }\n        }\n        colorAttribute.needsUpdate = true;\n    }\n}\nStudyMergedGeometryInteractive.W = 1280;\nStudyMergedGeometryInteractive.H = 800;\nwindow.onload = () => {\n    const study = new StudyMergedGeometryInteractive();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5017\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var e=1/0;for(c=0;c<deferred.length;c++){for(var[U,F,B]=deferred[c],s=!0,t=0;t<U.length;t++)(!1&B||e>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[t])))?U.splice(t--,1):(s=!1,B<e&&(e=B));if(s){deferred.splice(c--,1);var n=F();void 0!==n&&(Q=n)}}return Q}B=B||0;for(var c=deferred.length;c>0&&deferred[c-1][2]>B;c--)deferred[c]=deferred[c-1];deferred[c]=[U,F,B]},__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),__webpack_require__.j=317,(()=>{var Q={317:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,e,[s,t,n]=F,c=0;if(s.some((U=>0!==Q[U]))){for(B in t)__webpack_require__.o(t,B)&&(__webpack_require__.m[B]=t[B]);if(n)var g=n(__webpack_require__)}for(U&&U(F);c<s.length;c++)e=s[c],__webpack_require__.o(Q,e)&&Q[e]&&Q[e][0](),Q[e]=0;return __webpack_require__.O(g)},F=self.webpackChunkthreejs_lab=self.webpackChunkthreejs_lab||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(5017)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();