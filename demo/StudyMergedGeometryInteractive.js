(()=>{"use strict";var __webpack_modules__={7524:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// UNUSED EXPORTS: StudyMergedGeometryInteractive\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(6753);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/utils/BufferGeometryUtils.js\nvar BufferGeometryUtils = __webpack_require__(1426);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(3580);\n;// CONCATENATED MODULE: ./src/Common.ts\n\n\nclass Common {\n    static initScene() {\n        const scene = new three_module.Scene();\n        return scene;\n    }\n    static initLight(scene) {\n        const ambientLight = new three_module.AmbientLight(0xffffff, 1.0);\n        scene.add(ambientLight);\n        return ambientLight;\n    }\n    static initCamera(scene, W, H, near = 1, far = 400) {\n        const camera = new three_module.PerspectiveCamera(45, W / H, near, far);\n        camera.position.set(0, 0, 100);\n        camera.updateMatrixWorld(false);\n        scene.add(camera);\n        return camera;\n    }\n    static initControl(camera, render) {\n        let domElement;\n        if (render) {\n            domElement = render.domElement;\n        }\n        const control = new OrbitControls/* OrbitControls */.N(camera, domElement);\n        control.update();\n        return control;\n    }\n    static initRenderer(W, H, color = 0x000000, id = "webgl-canvas", antialias = true) {\n        const renderer = new three_module.WebGLRenderer({\n            canvas: document.getElementById(id),\n            antialias: antialias,\n        });\n        this.initRendererSettings(renderer, color, W, H);\n        return renderer;\n    }\n    static initRendererSettings(renderer, color, W, H) {\n        renderer.setClearColor(new three_module.Color(color));\n        renderer.setSize(W, H);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        console.log("three.js revision: ", three_module.REVISION);\n    }\n    static initHelper(scene) {\n        const axesHelper = new three_module.AxesHelper(30);\n        scene.add(axesHelper);\n    }\n    static render(control, renderer, scene, camera, onBeforeRender) {\n        const rendering = () => {\n            if (onBeforeRender) {\n                onBeforeRender();\n            }\n            control.update();\n            renderer.render(scene, camera);\n            requestAnimationFrame(rendering);\n        };\n        rendering();\n    }\n    static addRendererInfo() {\n        const info = document.createElement("div");\n        document.body.appendChild(info);\n        return info;\n    }\n    static updateRendererInfo(div, info) {\n        div.innerText = JSON.stringify(info);\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/libs/stats.module.js\nvar stats_module = __webpack_require__(4533);\n;// CONCATENATED MODULE: ./src/MergedGeometryStudy.ts\n\n\n\nclass MergedGeometryStudy {\n    constructor() {\n        this.initStats();\n        const scene = Common.initScene();\n        const camera = Common.initCamera(scene, MergedGeometryStudy.W, MergedGeometryStudy.H);\n        this.renderer = Common.initRenderer(MergedGeometryStudy.W, MergedGeometryStudy.H);\n        const object = this.initMesh(scene);\n        const info = Common.addRendererInfo();\n        this.render(object, info, this.renderer, scene, camera);\n    }\n    initStats() {\n        this.stats = new stats_module/* default */.A();\n        this.stats.showPanel(0);\n        document.body.appendChild(this.stats.dom);\n    }\n    initMesh(scene) {\n        // Override me\n        return new three_module.Group();\n    }\n    render(mergedMesh, infoContainer, renderer, scene, camera) {\n        const rendering = () => {\n            mergedMesh.rotation.x += 0.01;\n            mergedMesh.rotation.y += 0.01;\n            mergedMesh.rotation.z += 0.01;\n            this.stats.begin();\n            renderer.render(scene, camera);\n            this.stats.end();\n            Common.updateRendererInfo(infoContainer, renderer.info.render);\n            requestAnimationFrame(rendering);\n        };\n        rendering();\n    }\n}\nMergedGeometryStudy.W = 1280;\nMergedGeometryStudy.H = 800;\n\n;// CONCATENATED MODULE: ./src/StudyMergedGeometryInteractive.ts\n\n\n\n\nclass StudyMergedGeometryInteractive extends MergedGeometryStudy {\n    constructor() {\n        super();\n        this.raycaster = new three_module.Raycaster();\n        this.mousePoint = new three_module.Vector2();\n        this.onPointerMove = (e) => {\n            this.mousePoint.x =\n                (e.clientX / parseInt(this.renderer.domElement.style.width)) * 2 - 1;\n            this.mousePoint.y =\n                -(e.clientY / parseInt(this.renderer.domElement.style.height)) * 2 + 1;\n        };\n        document.addEventListener("pointermove", this.onPointerMove);\n    }\n    initMesh(scene) {\n        const geometryArray = [];\n        const size = 1;\n        const margin = 0.3;\n        const pitch = size + margin;\n        const numCube = 25;\n        const offset = (numCube * pitch) / 2;\n        const generateCube = (x, y, z, idCount) => {\n            const geometry = new three_module.BoxGeometry();\n            const positions = geometry.getAttribute("position");\n            const count = positions.count;\n            geometry.setAttribute("color", new three_module.BufferAttribute(new Float32Array(count * 4), 4));\n            geometry.setAttribute("originalColor", new three_module.BufferAttribute(new Float32Array(count * 4), 4));\n            geometry.setAttribute("mesh_id", new three_module.BufferAttribute(new Float32Array(count), 1));\n            const colors = geometry.getAttribute("color");\n            const originalColor = geometry.getAttribute("originalColor");\n            const idAttribute = geometry.getAttribute("mesh_id");\n            for (let i = 0; i < count; i++) {\n                positions.setXYZ(i, positions.getX(i) + x * pitch - offset, positions.getY(i) + y * pitch - offset, positions.getZ(i) + z * pitch - offset);\n                colors.setXYZW(i, x / numCube, y / numCube, z / numCube, 0.1);\n                originalColor.setXYZW(i, x / numCube, y / numCube, z / numCube, 0.1);\n                idAttribute.setX(i, idCount);\n            }\n            geometryArray.push(geometry);\n        };\n        let idCounter = 0;\n        for (let x = 0; x < numCube; x++) {\n            for (let y = 0; y < numCube; y++) {\n                for (let z = 0; z < numCube; z++) {\n                    generateCube(x, y, z, idCounter);\n                    idCounter++;\n                }\n            }\n        }\n        const mergedMesh = new three_module.Mesh((0,BufferGeometryUtils/* mergeGeometries */.pP)(geometryArray), new three_module.MeshBasicMaterial({ transparent: true, vertexColors: true }));\n        scene.add(mergedMesh);\n        return mergedMesh;\n    }\n    render(mergedMesh, infoContainer, renderer, scene, camera) {\n        const rendering = () => {\n            const speed = 0.01;\n            mergedMesh.rotation.x += speed;\n            mergedMesh.rotation.y += speed;\n            mergedMesh.rotation.z += speed;\n            mergedMesh.updateMatrix();\n            this.stats.begin();\n            this.raycaster?.setFromCamera(this.mousePoint, camera);\n            const intersects = this.raycaster?.intersectObject(mergedMesh, false);\n            if (intersects?.length > 0) {\n                this.updateIntersect(intersects[0], mergedMesh.geometry);\n            }\n            renderer.render(scene, camera);\n            this.stats.end();\n            Common.updateRendererInfo(infoContainer, renderer.info.render);\n            requestAnimationFrame(rendering);\n        };\n        rendering();\n    }\n    updateIntersect(intersect, geo) {\n        const idAttribute = geo.getAttribute("mesh_id");\n        const face = intersect.face;\n        const meshID = idAttribute.getX(face.a);\n        if (idAttribute.getX(face.a) !== idAttribute.getX(face.b) ||\n            idAttribute.getX(face.a) !== idAttribute.getX(face.c)) {\n            console.log(idAttribute.getX(face.a), idAttribute.getX(face.b), idAttribute.getX(face.c));\n        }\n        const colorAttribute = geo.getAttribute("color");\n        const originalColorAttribute = geo.getAttribute("originalColor");\n        const count = idAttribute.count;\n        for (let i = 0; i < count; i++) {\n            if (idAttribute.getX(i) === meshID) {\n                colorAttribute.setXYZW(i, 1, 1, 1, 1);\n            }\n            else {\n                colorAttribute.setXYZW(i, originalColorAttribute.getX(i), originalColorAttribute.getY(i), originalColorAttribute.getZ(i), originalColorAttribute.getW(i));\n            }\n        }\n        colorAttribute.needsUpdate = true;\n    }\n}\nStudyMergedGeometryInteractive.W = 1280;\nStudyMergedGeometryInteractive.H = 800;\nwindow.onload = () => {\n    const study = new StudyMergedGeometryInteractive();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUMvQixJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxFQUFFLENBQUM7Z0JBQ25DLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLENBQUM7aUJBQU0sQ0FBQztnQkFDTixjQUFjLENBQUMsT0FBTyxDQUNwQixDQUFDLEVBQ0Qsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUM5QixzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQzlCLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDOUIsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUMvQixDQUFDO1lBQ0osQ0FBQztRQUNILENBQUM7UUFDRCxjQUFjLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztJQUNwQyxDQUFDOztBQW5Kc0IsZ0NBQUMsR0FBRyxJQUFJLENBQUM7QUFDVCxnQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQXFKakMsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7SUFDbkIsTUFBTSxLQUFLLEdBQUcsSUFBSSw4QkFBOEIsRUFBRSxDQUFDO0FBQ3JELENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RocmVlanMtbGFiLy4vc3JjL0NvbW1vbi50cz83MzMwIiwid2VicGFjazovL3RocmVlanMtbGFiLy4vc3JjL01lcmdlZEdlb21ldHJ5U3R1ZHkudHM/MzRmNyIsIndlYnBhY2s6Ly90aHJlZWpzLWxhYi8uL3NyYy9TdHVkeU1lcmdlZEdlb21ldHJ5SW50ZXJhY3RpdmUudHM/NjZjZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBbWJpZW50TGlnaHQsXG4gIEF4ZXNIZWxwZXIsXG4gIENhbWVyYSxcbiAgQ29sb3IsXG4gIFBlcnNwZWN0aXZlQ2FtZXJhLFxuICBTY2VuZSxcbiAgV2ViR0xSZW5kZXJlcixcbiAgUkVWSVNJT04sXG59IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgT3JiaXRDb250cm9scyB9IGZyb20gXCJ0aHJlZS9leGFtcGxlcy9qc20vY29udHJvbHMvT3JiaXRDb250cm9scy5qc1wiO1xuXG5leHBvcnQgY2xhc3MgQ29tbW9uIHtcbiAgcHVibGljIHN0YXRpYyBpbml0U2NlbmUoKSB7XG4gICAgY29uc3Qgc2NlbmUgPSBuZXcgU2NlbmUoKTtcbiAgICByZXR1cm4gc2NlbmU7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGluaXRMaWdodChzY2VuZSkge1xuICAgIGNvbnN0IGFtYmllbnRMaWdodCA9IG5ldyBBbWJpZW50TGlnaHQoMHhmZmZmZmYsIDEuMCk7XG4gICAgc2NlbmUuYWRkKGFtYmllbnRMaWdodCk7XG4gICAgcmV0dXJuIGFtYmllbnRMaWdodDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaW5pdENhbWVyYShcbiAgICBzY2VuZTogU2NlbmUsXG4gICAgVzogbnVtYmVyLFxuICAgIEg6IG51bWJlcixcbiAgICBuZWFyID0gMSxcbiAgICBmYXIgPSA0MDBcbiAgKTogUGVyc3BlY3RpdmVDYW1lcmEge1xuICAgIGNvbnN0IGNhbWVyYSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSg0NSwgVyAvIEgsIG5lYXIsIGZhcik7XG4gICAgY2FtZXJhLnBvc2l0aW9uLnNldCgwLCAwLCAxMDApO1xuICAgIGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZChmYWxzZSk7XG4gICAgc2NlbmUuYWRkKGNhbWVyYSk7XG4gICAgcmV0dXJuIGNhbWVyYTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaW5pdENvbnRyb2woXG4gICAgY2FtZXJhOiBDYW1lcmEsXG4gICAgcmVuZGVyOiBXZWJHTFJlbmRlcmVyXG4gICk6IE9yYml0Q29udHJvbHMge1xuICAgIGxldCBkb21FbGVtZW50O1xuICAgIGlmIChyZW5kZXIpIHtcbiAgICAgIGRvbUVsZW1lbnQgPSByZW5kZXIuZG9tRWxlbWVudDtcbiAgICB9XG4gICAgY29uc3QgY29udHJvbCA9IG5ldyBPcmJpdENvbnRyb2xzKGNhbWVyYSwgZG9tRWxlbWVudCk7XG4gICAgY29udHJvbC51cGRhdGUoKTtcbiAgICByZXR1cm4gY29udHJvbDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaW5pdFJlbmRlcmVyKFxuICAgIFc6IG51bWJlcixcbiAgICBIOiBudW1iZXIsXG4gICAgY29sb3I6IG51bWJlciA9IDB4MDAwMDAwLFxuICAgIGlkOiBzdHJpbmcgPSBcIndlYmdsLWNhbnZhc1wiLFxuICAgIGFudGlhbGlhczogYm9vbGVhbiA9IHRydWVcbiAgKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBuZXcgV2ViR0xSZW5kZXJlcih7XG4gICAgICBjYW52YXM6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSBhcyBIVE1MQ2FudmFzRWxlbWVudCxcbiAgICAgIGFudGlhbGlhczogYW50aWFsaWFzLFxuICAgIH0pO1xuICAgIHRoaXMuaW5pdFJlbmRlcmVyU2V0dGluZ3MocmVuZGVyZXIsIGNvbG9yLCBXLCBIKTtcbiAgICByZXR1cm4gcmVuZGVyZXI7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBpbml0UmVuZGVyZXJTZXR0aW5ncyhcbiAgICByZW5kZXJlcjogV2ViR0xSZW5kZXJlcixcbiAgICBjb2xvcjogbnVtYmVyLFxuICAgIFc6IG51bWJlcixcbiAgICBIOiBudW1iZXJcbiAgKSB7XG4gICAgcmVuZGVyZXIuc2V0Q2xlYXJDb2xvcihuZXcgQ29sb3IoY29sb3IpKTtcbiAgICByZW5kZXJlci5zZXRTaXplKFcsIEgpO1xuICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgIGNvbnNvbGUubG9nKFwidGhyZWUuanMgcmV2aXNpb246IFwiLCBSRVZJU0lPTik7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGluaXRIZWxwZXIoc2NlbmU6IFNjZW5lKTogdm9pZCB7XG4gICAgY29uc3QgYXhlc0hlbHBlciA9IG5ldyBBeGVzSGVscGVyKDMwKTtcbiAgICBzY2VuZS5hZGQoYXhlc0hlbHBlcik7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHJlbmRlcihcbiAgICBjb250cm9sOiBPcmJpdENvbnRyb2xzLFxuICAgIHJlbmRlcmVyOiBXZWJHTFJlbmRlcmVyLFxuICAgIHNjZW5lOiBTY2VuZSxcbiAgICBjYW1lcmE6IENhbWVyYSxcbiAgICBvbkJlZm9yZVJlbmRlcj86ICgpID0+IHZvaWRcbiAgKSB7XG4gICAgY29uc3QgcmVuZGVyaW5nID0gKCkgPT4ge1xuICAgICAgaWYgKG9uQmVmb3JlUmVuZGVyKSB7XG4gICAgICAgIG9uQmVmb3JlUmVuZGVyKCk7XG4gICAgICB9XG4gICAgICBjb250cm9sLnVwZGF0ZSgpO1xuICAgICAgcmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcmluZyk7XG4gICAgfTtcbiAgICByZW5kZXJpbmcoKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgYWRkUmVuZGVyZXJJbmZvKCk6IEhUTUxEaXZFbGVtZW50IHtcbiAgICBjb25zdCBpbmZvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGluZm8pO1xuICAgIHJldHVybiBpbmZvO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyB1cGRhdGVSZW5kZXJlckluZm8oZGl2OiBIVE1MRGl2RWxlbWVudCwgaW5mbzogYW55KTogdm9pZCB7XG4gICAgZGl2LmlubmVyVGV4dCA9IEpTT04uc3RyaW5naWZ5KGluZm8pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDYW1lcmEsIEdyb3VwLCBPYmplY3QzRCwgU2NlbmUsIFdlYkdMUmVuZGVyZXIgfSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCBTdGF0cyBmcm9tIFwidGhyZWUvZXhhbXBsZXMvanNtL2xpYnMvc3RhdHMubW9kdWxlLmpzXCI7XG5pbXBvcnQgeyBDb21tb24gfSBmcm9tIFwiLi9Db21tb25cIjtcblxuZXhwb3J0IGNsYXNzIE1lcmdlZEdlb21ldHJ5U3R1ZHkge1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFcgPSAxMjgwO1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEggPSA4MDA7XG4gIHByb3RlY3RlZCBzdGF0cztcbiAgcHJvdGVjdGVkIHJlbmRlcmVyOiBXZWJHTFJlbmRlcmVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaW5pdFN0YXRzKCk7XG4gICAgY29uc3Qgc2NlbmUgPSBDb21tb24uaW5pdFNjZW5lKCk7XG5cbiAgICBjb25zdCBjYW1lcmEgPSBDb21tb24uaW5pdENhbWVyYShcbiAgICAgIHNjZW5lLFxuICAgICAgTWVyZ2VkR2VvbWV0cnlTdHVkeS5XLFxuICAgICAgTWVyZ2VkR2VvbWV0cnlTdHVkeS5IXG4gICAgKTtcbiAgICB0aGlzLnJlbmRlcmVyID0gQ29tbW9uLmluaXRSZW5kZXJlcihcbiAgICAgIE1lcmdlZEdlb21ldHJ5U3R1ZHkuVyxcbiAgICAgIE1lcmdlZEdlb21ldHJ5U3R1ZHkuSFxuICAgICk7XG5cbiAgICBjb25zdCBvYmplY3QgPSB0aGlzLmluaXRNZXNoKHNjZW5lKTtcbiAgICBjb25zdCBpbmZvID0gQ29tbW9uLmFkZFJlbmRlcmVySW5mbygpO1xuXG4gICAgdGhpcy5yZW5kZXIob2JqZWN0LCBpbmZvLCB0aGlzLnJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdFN0YXRzKCk6IHZvaWQge1xuICAgIHRoaXMuc3RhdHMgPSBuZXcgU3RhdHMoKTtcbiAgICB0aGlzLnN0YXRzLnNob3dQYW5lbCgwKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuc3RhdHMuZG9tKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbml0TWVzaChzY2VuZTogU2NlbmUpOiBPYmplY3QzRCB7XG4gICAgLy8gT3ZlcnJpZGUgbWVcbiAgICByZXR1cm4gbmV3IEdyb3VwKCk7XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyKFxuICAgIG1lcmdlZE1lc2g6IE9iamVjdDNELFxuICAgIGluZm9Db250YWluZXI6IEhUTUxEaXZFbGVtZW50LFxuICAgIHJlbmRlcmVyOiBXZWJHTFJlbmRlcmVyLFxuICAgIHNjZW5lOiBTY2VuZSxcbiAgICBjYW1lcmE6IENhbWVyYVxuICApIHtcbiAgICBjb25zdCByZW5kZXJpbmcgPSAoKSA9PiB7XG4gICAgICBtZXJnZWRNZXNoLnJvdGF0aW9uLnggKz0gMC4wMTtcbiAgICAgIG1lcmdlZE1lc2gucm90YXRpb24ueSArPSAwLjAxO1xuICAgICAgbWVyZ2VkTWVzaC5yb3RhdGlvbi56ICs9IDAuMDE7XG5cbiAgICAgIHRoaXMuc3RhdHMuYmVnaW4oKTtcbiAgICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcbiAgICAgIHRoaXMuc3RhdHMuZW5kKCk7XG5cbiAgICAgIENvbW1vbi51cGRhdGVSZW5kZXJlckluZm8oaW5mb0NvbnRhaW5lciwgcmVuZGVyZXIuaW5mby5yZW5kZXIpO1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcmluZyk7XG4gICAgfTtcbiAgICByZW5kZXJpbmcoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgQm94R2VvbWV0cnksXG4gIEJ1ZmZlckF0dHJpYnV0ZSxcbiAgQnVmZmVyR2VvbWV0cnksXG4gIENhbWVyYSxcbiAgRmFjZSxcbiAgSW50ZXJzZWN0aW9uLFxuICBNZXNoLFxuICBNZXNoQmFzaWNNYXRlcmlhbCxcbiAgT2JqZWN0M0QsXG4gIFJheWNhc3RlcixcbiAgU2NlbmUsXG4gIFZlY3RvcjIsXG4gIFdlYkdMUmVuZGVyZXIsXG59IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgbWVyZ2VHZW9tZXRyaWVzIH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS91dGlscy9CdWZmZXJHZW9tZXRyeVV0aWxzLmpzXCI7XG5pbXBvcnQgeyBDb21tb24gfSBmcm9tIFwiLi9Db21tb25cIjtcbmltcG9ydCB7IE1lcmdlZEdlb21ldHJ5U3R1ZHkgfSBmcm9tIFwiLi9NZXJnZWRHZW9tZXRyeVN0dWR5XCI7XG5cbmV4cG9ydCBjbGFzcyBTdHVkeU1lcmdlZEdlb21ldHJ5SW50ZXJhY3RpdmUgZXh0ZW5kcyBNZXJnZWRHZW9tZXRyeVN0dWR5IHtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBXID0gMTI4MDtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBIID0gODAwO1xuICBwcm90ZWN0ZWQgc3RhdHM7XG4gIHByb3RlY3RlZCByYXljYXN0ZXI6IFJheWNhc3RlciA9IG5ldyBSYXljYXN0ZXIoKTtcbiAgcHJvdGVjdGVkIG1vdXNlUG9pbnQ6IFZlY3RvcjIgPSBuZXcgVmVjdG9yMigpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIHRoaXMub25Qb2ludGVyTW92ZSk7XG4gIH1cblxuICBwcml2YXRlIG9uUG9pbnRlck1vdmUgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgIHRoaXMubW91c2VQb2ludC54ID1cbiAgICAgIChlLmNsaWVudFggLyBwYXJzZUludCh0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUud2lkdGgpKSAqIDIgLSAxO1xuICAgIHRoaXMubW91c2VQb2ludC55ID1cbiAgICAgIC0oZS5jbGllbnRZIC8gcGFyc2VJbnQodGhpcy5yZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLmhlaWdodCkpICogMiArIDE7XG4gIH07XG5cbiAgcHJvdGVjdGVkIGluaXRNZXNoKHNjZW5lOiBTY2VuZSk6IE1lc2gge1xuICAgIGNvbnN0IGdlb21ldHJ5QXJyYXk6IEJveEdlb21ldHJ5W10gPSBbXTtcblxuICAgIGNvbnN0IHNpemUgPSAxO1xuICAgIGNvbnN0IG1hcmdpbiA9IDAuMztcbiAgICBjb25zdCBwaXRjaCA9IHNpemUgKyBtYXJnaW47XG4gICAgY29uc3QgbnVtQ3ViZSA9IDI1O1xuICAgIGNvbnN0IG9mZnNldCA9IChudW1DdWJlICogcGl0Y2gpIC8gMjtcblxuICAgIGNvbnN0IGdlbmVyYXRlQ3ViZSA9ICh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCBpZENvdW50OiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJveEdlb21ldHJ5KCk7XG4gICAgICBjb25zdCBwb3NpdGlvbnMgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiKTtcbiAgICAgIGNvbnN0IGNvdW50ID0gcG9zaXRpb25zLmNvdW50O1xuICAgICAgZ2VvbWV0cnkuc2V0QXR0cmlidXRlKFxuICAgICAgICBcImNvbG9yXCIsXG4gICAgICAgIG5ldyBCdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShjb3VudCAqIDQpLCA0KVxuICAgICAgKTtcbiAgICAgIGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcbiAgICAgICAgXCJvcmlnaW5hbENvbG9yXCIsXG4gICAgICAgIG5ldyBCdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShjb3VudCAqIDQpLCA0KVxuICAgICAgKTtcbiAgICAgIGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcbiAgICAgICAgXCJtZXNoX2lkXCIsXG4gICAgICAgIG5ldyBCdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShjb3VudCksIDEpXG4gICAgICApO1xuXG4gICAgICBjb25zdCBjb2xvcnMgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoXCJjb2xvclwiKTtcbiAgICAgIGNvbnN0IG9yaWdpbmFsQ29sb3IgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoXCJvcmlnaW5hbENvbG9yXCIpO1xuICAgICAgY29uc3QgaWRBdHRyaWJ1dGUgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoXCJtZXNoX2lkXCIpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgcG9zaXRpb25zLnNldFhZWihcbiAgICAgICAgICBpLFxuICAgICAgICAgIHBvc2l0aW9ucy5nZXRYKGkpICsgeCAqIHBpdGNoIC0gb2Zmc2V0LFxuICAgICAgICAgIHBvc2l0aW9ucy5nZXRZKGkpICsgeSAqIHBpdGNoIC0gb2Zmc2V0LFxuICAgICAgICAgIHBvc2l0aW9ucy5nZXRaKGkpICsgeiAqIHBpdGNoIC0gb2Zmc2V0XG4gICAgICAgICk7XG4gICAgICAgIGNvbG9ycy5zZXRYWVpXKGksIHggLyBudW1DdWJlLCB5IC8gbnVtQ3ViZSwgeiAvIG51bUN1YmUsIDAuMSk7XG4gICAgICAgIG9yaWdpbmFsQ29sb3Iuc2V0WFlaVyhpLCB4IC8gbnVtQ3ViZSwgeSAvIG51bUN1YmUsIHogLyBudW1DdWJlLCAwLjEpO1xuICAgICAgICBpZEF0dHJpYnV0ZS5zZXRYKGksIGlkQ291bnQpO1xuICAgICAgfVxuICAgICAgZ2VvbWV0cnlBcnJheS5wdXNoKGdlb21ldHJ5KTtcbiAgICB9O1xuXG4gICAgbGV0IGlkQ291bnRlciA9IDA7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCBudW1DdWJlOyB4KyspIHtcbiAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgbnVtQ3ViZTsgeSsrKSB7XG4gICAgICAgIGZvciAobGV0IHogPSAwOyB6IDwgbnVtQ3ViZTsgeisrKSB7XG4gICAgICAgICAgZ2VuZXJhdGVDdWJlKHgsIHksIHosIGlkQ291bnRlcik7XG4gICAgICAgICAgaWRDb3VudGVyKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBtZXJnZWRNZXNoID0gbmV3IE1lc2goXG4gICAgICBtZXJnZUdlb21ldHJpZXMoZ2VvbWV0cnlBcnJheSksXG4gICAgICBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoeyB0cmFuc3BhcmVudDogdHJ1ZSwgdmVydGV4Q29sb3JzOiB0cnVlIH0pXG4gICAgKTtcblxuICAgIHNjZW5lLmFkZChtZXJnZWRNZXNoKTtcbiAgICByZXR1cm4gbWVyZ2VkTWVzaDtcbiAgfVxuXG4gIHB1YmxpYyByZW5kZXIoXG4gICAgbWVyZ2VkTWVzaDogT2JqZWN0M0QsXG4gICAgaW5mb0NvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQsXG4gICAgcmVuZGVyZXI6IFdlYkdMUmVuZGVyZXIsXG4gICAgc2NlbmU6IFNjZW5lLFxuICAgIGNhbWVyYTogQ2FtZXJhXG4gICkge1xuICAgIGNvbnN0IHJlbmRlcmluZyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHNwZWVkID0gMC4wMTtcbiAgICAgIG1lcmdlZE1lc2gucm90YXRpb24ueCArPSBzcGVlZDtcbiAgICAgIG1lcmdlZE1lc2gucm90YXRpb24ueSArPSBzcGVlZDtcbiAgICAgIG1lcmdlZE1lc2gucm90YXRpb24ueiArPSBzcGVlZDtcbiAgICAgIG1lcmdlZE1lc2gudXBkYXRlTWF0cml4KCk7XG5cbiAgICAgIHRoaXMuc3RhdHMuYmVnaW4oKTtcblxuICAgICAgdGhpcy5yYXljYXN0ZXI/LnNldEZyb21DYW1lcmEodGhpcy5tb3VzZVBvaW50LCBjYW1lcmEpO1xuICAgICAgY29uc3QgaW50ZXJzZWN0cyA9IHRoaXMucmF5Y2FzdGVyPy5pbnRlcnNlY3RPYmplY3QobWVyZ2VkTWVzaCwgZmFsc2UpO1xuXG4gICAgICBpZiAoaW50ZXJzZWN0cz8ubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLnVwZGF0ZUludGVyc2VjdChpbnRlcnNlY3RzWzBdLCAobWVyZ2VkTWVzaCBhcyBNZXNoKS5nZW9tZXRyeSk7XG4gICAgICB9XG5cbiAgICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcbiAgICAgIHRoaXMuc3RhdHMuZW5kKCk7XG5cbiAgICAgIENvbW1vbi51cGRhdGVSZW5kZXJlckluZm8oaW5mb0NvbnRhaW5lciwgcmVuZGVyZXIuaW5mby5yZW5kZXIpO1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcmluZyk7XG4gICAgfTtcbiAgICByZW5kZXJpbmcoKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlSW50ZXJzZWN0KGludGVyc2VjdDogSW50ZXJzZWN0aW9uLCBnZW86IEJ1ZmZlckdlb21ldHJ5KTogdm9pZCB7XG4gICAgY29uc3QgaWRBdHRyaWJ1dGUgPSBnZW8uZ2V0QXR0cmlidXRlKFwibWVzaF9pZFwiKTtcbiAgICBjb25zdCBmYWNlID0gaW50ZXJzZWN0LmZhY2UgYXMgRmFjZTtcbiAgICBjb25zdCBtZXNoSUQgPSBpZEF0dHJpYnV0ZS5nZXRYKGZhY2UuYSk7XG5cbiAgICBpZiAoXG4gICAgICBpZEF0dHJpYnV0ZS5nZXRYKGZhY2UuYSkgIT09IGlkQXR0cmlidXRlLmdldFgoZmFjZS5iKSB8fFxuICAgICAgaWRBdHRyaWJ1dGUuZ2V0WChmYWNlLmEpICE9PSBpZEF0dHJpYnV0ZS5nZXRYKGZhY2UuYylcbiAgICApIHtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBpZEF0dHJpYnV0ZS5nZXRYKGZhY2UuYSksXG4gICAgICAgIGlkQXR0cmlidXRlLmdldFgoZmFjZS5iKSxcbiAgICAgICAgaWRBdHRyaWJ1dGUuZ2V0WChmYWNlLmMpXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbG9yQXR0cmlidXRlID0gZ2VvLmdldEF0dHJpYnV0ZShcImNvbG9yXCIpO1xuICAgIGNvbnN0IG9yaWdpbmFsQ29sb3JBdHRyaWJ1dGUgPSBnZW8uZ2V0QXR0cmlidXRlKFwib3JpZ2luYWxDb2xvclwiKTtcbiAgICBjb25zdCBjb3VudCA9IGlkQXR0cmlidXRlLmNvdW50O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBpZiAoaWRBdHRyaWJ1dGUuZ2V0WChpKSA9PT0gbWVzaElEKSB7XG4gICAgICAgIGNvbG9yQXR0cmlidXRlLnNldFhZWlcoaSwgMSwgMSwgMSwgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2xvckF0dHJpYnV0ZS5zZXRYWVpXKFxuICAgICAgICAgIGksXG4gICAgICAgICAgb3JpZ2luYWxDb2xvckF0dHJpYnV0ZS5nZXRYKGkpLFxuICAgICAgICAgIG9yaWdpbmFsQ29sb3JBdHRyaWJ1dGUuZ2V0WShpKSxcbiAgICAgICAgICBvcmlnaW5hbENvbG9yQXR0cmlidXRlLmdldFooaSksXG4gICAgICAgICAgb3JpZ2luYWxDb2xvckF0dHJpYnV0ZS5nZXRXKGkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbG9yQXR0cmlidXRlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgfVxufVxuXG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICBjb25zdCBzdHVkeSA9IG5ldyBTdHVkeU1lcmdlZEdlb21ldHJ5SW50ZXJhY3RpdmUoKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7524\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var e=1/0;for(c=0;c<deferred.length;c++){for(var[U,F,B]=deferred[c],s=!0,t=0;t<U.length;t++)(!1&B||e>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[t])))?U.splice(t--,1):(s=!1,B<e&&(e=B));if(s){deferred.splice(c--,1);var n=F();void 0!==n&&(Q=n)}}return Q}B=B||0;for(var c=deferred.length;c>0&&deferred[c-1][2]>B;c--)deferred[c]=deferred[c-1];deferred[c]=[U,F,B]},__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),__webpack_require__.j=878,(()=>{var Q={878:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,e,[s,t,n]=F,c=0;if(s.some((U=>0!==Q[U]))){for(B in t)__webpack_require__.o(t,B)&&(__webpack_require__.m[B]=t[B]);if(n)var g=n(__webpack_require__)}for(U&&U(F);c<s.length;c++)e=s[c],__webpack_require__.o(Q,e)&&Q[e]&&Q[e][0](),Q[e]=0;return __webpack_require__.O(g)},F=self.webpackChunkthreejs_lab=self.webpackChunkthreejs_lab||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[121],(()=>__webpack_require__(7524)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();