(()=>{"use strict";var __webpack_modules__={8855:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// UNUSED EXPORTS: Study\n\n// EXTERNAL MODULE: ./node_modules/lil-gui/dist/lil-gui.esm.js\nvar lil_gui_esm = __webpack_require__(638);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(6753);\n// EXTERNAL MODULE: ./node_modules/three-nebula/build/esm/index.js + 97 modules\nvar esm = __webpack_require__(4753);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(3580);\n;// CONCATENATED MODULE: ./src/Common.ts\n\n\nclass Common {\n    static initScene() {\n        const scene = new three_module.Scene();\n        return scene;\n    }\n    static initLight(scene) {\n        const ambientLight = new three_module.AmbientLight(0xffffff, 1.0);\n        scene.add(ambientLight);\n        return ambientLight;\n    }\n    static initCamera(scene, W, H, near = 1, far = 400) {\n        const camera = new three_module.PerspectiveCamera(45, W / H, near, far);\n        camera.position.set(0, 0, 100);\n        camera.updateMatrixWorld(false);\n        scene.add(camera);\n        return camera;\n    }\n    static initControl(camera, render) {\n        let domElement;\n        if (render) {\n            domElement = render.domElement;\n        }\n        const control = new OrbitControls/* OrbitControls */.N(camera, domElement);\n        control.update();\n        return control;\n    }\n    static initRenderer(W, H, color = 0x000000, id = "webgl-canvas", antialias = true) {\n        const renderer = new three_module.WebGLRenderer({\n            canvas: document.getElementById(id),\n            antialias: antialias,\n        });\n        this.initRendererSettings(renderer, color, W, H);\n        return renderer;\n    }\n    static initRendererSettings(renderer, color, W, H) {\n        renderer.setClearColor(new three_module.Color(color));\n        renderer.setSize(W, H);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        console.log("three.js revision: ", three_module.REVISION);\n    }\n    static initHelper(scene) {\n        const axesHelper = new three_module.AxesHelper(30);\n        scene.add(axesHelper);\n    }\n    static render(control, renderer, scene, camera, onBeforeRender) {\n        const rendering = () => {\n            if (onBeforeRender) {\n                onBeforeRender();\n            }\n            control.update();\n            renderer.render(scene, camera);\n            requestAnimationFrame(rendering);\n        };\n        rendering();\n    }\n    static addRendererInfo() {\n        const info = document.createElement("div");\n        document.body.appendChild(info);\n        return info;\n    }\n    static updateRendererInfo(div, info) {\n        div.innerText = JSON.stringify(info);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/nebulaFire/FireEmitter.ts\n\n\nclass FireEmitter extends esm/* Emitter */.vl {\n    get colorBehaviour() {\n        return this._color;\n    }\n    get scaleBehaviour() {\n        return this._scale;\n    }\n    get alphaBehaviour() {\n        return this._alpha;\n    }\n    get lifeInitializer() {\n        return this._life;\n    }\n    get radiusInitializer() {\n        return this._radius;\n    }\n    get rangeInitializer() {\n        return this._range;\n    }\n    constructor(option) {\n        super();\n        this.initEmitter(option);\n    }\n    initEmitter(option) {\n        this._range = new esm/* RadialVelocity */.Xj(16, new esm/* Vector3D */.Dl(0, 1, 0), 20);\n        this._radius = new esm/* Radius */.TI(8, 10);\n        this._life = new esm/* Life */.RB(4.0);\n        this._alpha = new esm/* Alpha */.ry(1.0, 1.0);\n        this._scale = new esm/* Scale */.FE(1.2, 0.6);\n        this._color = new esm/* Color */.Q1(new three_module.Color(0x994422), new three_module.Color(0x110000));\n        this.initOnLoadedTexture(option);\n    }\n    initBody(urlArray) {\n        const loader = new three_module.TextureLoader();\n        const sprites = urlArray.map((url) => {\n            return new three_module.Sprite(new three_module.SpriteMaterial({\n                map: loader.load(url),\n                blending: three_module.AdditiveBlending,\n            }));\n        });\n        this._body = new esm/* Body */.nB(sprites);\n    }\n    initOnLoadedTexture(option) {\n        this.initBody(option.maps);\n        // @ts-ignore\n        this.setRate(new esm/* Rate */.tt(new esm/* Span */.L9(2, 7), 0.06))\n            .setInitializers([\n            new esm/* Position */.yX(new esm/* SphereZone */.C9(0, 0, 0.0, 6.0)),\n            this._radius,\n            this._life,\n            this._range,\n            this._body,\n        ])\n            .setBehaviours([this._alpha, this._scale, this._color])\n            .emit();\n        // @ts-ignore\n        this.position.y = -8;\n    }\n}\nclass FireEmitterOption {\n}\n\n;// CONCATENATED MODULE: ./src/NebulaGUI.ts\nclass NebulaGUI {\n    /**\n     * emitterの座標制御\n     * @param gui\n     */\n    static initEmitterPosition(gui, emitters) {\n        const prop = {\n            x: emitters[0].position.x,\n            y: emitters[0].position.y,\n            z: emitters[0].position.z,\n        };\n        const changed = (val) => {\n            emitters.forEach((emt) => {\n                emt.position.x = prop.x;\n                emt.position.y = prop.y;\n                emt.position.z = prop.z;\n            });\n        };\n        const folder = gui.addFolder("Position");\n        folder.add(prop, "x", -30.0, 30.0).onChange(changed);\n        folder.add(prop, "y", -30.0, 30.0).onChange(changed);\n        folder.add(prop, "z", -30.0, 30.0).onChange(changed);\n        folder.open();\n    }\n    /**\n     * パーティクル生成間隔の制御パネル\n     * @param gui\n     */\n    static initEmitterRate(gui, emitters) {\n        //spanクラスはmin, maxの２つの値をセットにした範囲を指定する型\n        const prop = {\n            numPanA: emitters[0].rate.numPan.a,\n            numPanB: emitters[0].rate.numPan.b,\n            timePan: emitters[0].rate.timePan.a,\n        };\n        const changed = (val) => {\n            emitters.forEach((emt) => {\n                emt.rate.numPan.a = prop.numPanA;\n                emt.rate.numPan.b = prop.numPanB;\n                emt.rate.timePan.a = prop.timePan;\n            });\n        };\n        /**\n         * 1回で射出されるパーティクルの数, min, max\n         */\n        const folder = gui.addFolder("Rate");\n        folder.add(prop, "numPanA", 0.0, 30.0).step(1).onChange(changed);\n        folder.add(prop, "numPanB", 0.0, 30.0).step(1).onChange(changed);\n        folder.add(prop, "timePan", 0.01, 0.5).step(0.01).onChange(changed);\n        folder.open();\n    }\n    /**\n     * 射出した粒子の到達点および射出角度を制御するパネル\n     * @param gui\n     */\n    static initRange(gui, ranges) {\n        const prop = {\n            radiusMin: ranges[0].radiusPan.a,\n            radiusMax: ranges[0].radiusPan.b,\n            tha: ranges[0].tha,\n        };\n        const changed = (val) => {\n            ranges.forEach((range) => {\n                range.radiusPan.a = prop.radiusMin;\n                range.radiusPan.b = prop.radiusMax;\n                range.tha = prop.tha;\n            });\n        };\n        const folder = gui.addFolder("RadialVelocity");\n        folder.add(prop, "radiusMin", 0.0, 45.0).step(0.1).onChange(changed);\n        folder.add(prop, "radiusMax", 0.0, 45.0).step(0.1).onChange(changed);\n        folder.add(prop, "tha", 0.0, Math.PI).step(0.1).onChange(changed);\n        folder.open();\n    }\n    /**\n     * Spriteのサイズを制御するパネル\n     * @param gui\n     */\n    static initRadius(gui, radiusInitializers) {\n        const prop = {\n            min: radiusInitializers[0].radius.a,\n            max: radiusInitializers[0].radius.b,\n        };\n        const changed = (val) => {\n            radiusInitializers.forEach((rad) => {\n                rad.radius.a = prop.min;\n                rad.radius.b = prop.max;\n            });\n        };\n        const folder = gui.addFolder("Initial Sprite Size");\n        folder.add(prop, "min", 0.0, 45.0).step(0.1).onChange(changed);\n        folder.add(prop, "max", 0.0, 45.0).step(0.1).onChange(changed);\n        folder.open();\n    }\n    /**\n     * Spriteの寿命を制御するパネル\n     * @param gui\n     */\n    static initLife(gui, lifeInitializers) {\n        //spanクラスはmin, maxの２つの値をセットにした範囲を指定する型\n        const span = lifeInitializers[0].lifePan;\n        const prop = {\n            min: span.a,\n            max: span.b,\n        };\n        const changed = (val) => {\n            lifeInitializers.forEach((life) => {\n                life.lifePan.a = prop.min;\n                life.lifePan.b = prop.max;\n            });\n        };\n        const folder = gui.addFolder("Life");\n        folder.add(prop, "min", 0.0, 12.0).step(0.1).onChange(changed);\n        folder.add(prop, "max", 0.0, 24.0).step(0.1).onChange(changed);\n        folder.open();\n    }\n    static initAlpha(gui, alphaBehaviours) {\n        const prop = {\n            start: alphaBehaviours[0].alphaA.a,\n            end: alphaBehaviours[0].alphaB.a,\n        };\n        const changed = (val) => {\n            alphaBehaviours.forEach((alpha) => {\n                alpha.alphaA.a = prop.start;\n                alpha.alphaA.b = prop.start;\n                alpha.alphaB.a = prop.end;\n                alpha.alphaB.b = prop.end;\n            });\n        };\n        const folder = gui.addFolder("Alpha");\n        folder.add(prop, "start", 0.0, 1.0).step(0.1).onChange(changed);\n        folder.add(prop, "end", 0.0, 1.0).step(0.1).onChange(changed);\n        folder.open();\n    }\n    static initScale(gui, scaleBehaviours) {\n        const prop = {\n            start: scaleBehaviours[0].scaleA.a,\n            end: scaleBehaviours[0].scaleB.a,\n        };\n        const changed = (val) => {\n            scaleBehaviours.forEach((scale) => {\n                scale.scaleA.a = prop.start;\n                scale.scaleA.b = prop.start;\n                scale.scaleB.a = prop.end;\n                scale.scaleB.b = prop.end;\n            });\n        };\n        const folder = gui.addFolder("Scale");\n        folder.add(prop, "start", 0.0, 3.0).step(0.1).onChange(changed);\n        folder.add(prop, "end", 0.0, 3.0).step(0.1).onChange(changed);\n        folder.open();\n    }\n    static initColor(gui, colors) {\n        const prop = {\n            start: colors[0].colorA.colors[0].getHex(),\n            end: colors[0].colorB.colors[0].getHex(),\n        };\n        const changed = () => {\n            colors.forEach((color) => {\n                color.colorA.colors[0].setHex(prop.start);\n                color.colorB.colors[0].setHex(prop.end);\n            });\n        };\n        const folder = gui.addFolder("Color");\n        folder.addColor(prop, "start").onChange(changed);\n        folder.addColor(prop, "end").onChange(changed);\n        folder.open();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/StudyNebulaFire.ts\n\n\n\n\n\n\n/**\n * パーティクルエンジンを利用した炎の表現の作例。\n * https://www.youtube.com/watch?v=5Mw6NpSEb2o\n */\nclass Study {\n    constructor() {\n        const scene = Common.initScene();\n        Common.initLight(scene);\n        const camera = Common.initCamera(scene, Study.W, Study.H);\n        const renderer = Common.initRenderer(Study.W, Study.H);\n        const control = Common.initControl(camera, renderer);\n        Common.initHelper(scene);\n        this.initObject(scene);\n        Common.render(control, renderer, scene, camera, () => {\n            if (this.system) {\n                this.system.update();\n            }\n        });\n        this.initGUI();\n    }\n    initObject(scene) {\n        this.system = new esm/* default */.Ay();\n        this.emitter = new FireEmitter({\n            maps: [\n                "./textures/fire01.png",\n                "./textures/fire02.png",\n                "./textures/fire03.png",\n                "./textures/fire04.png",\n            ],\n        });\n        const renderer = new esm/* SpriteRenderer */.jS(scene, three_module);\n        this.system.addEmitter(this.emitter);\n        this.system.addRenderer(renderer);\n    }\n    initGUI() {\n        const gui = new lil_gui_esm/* GUI */.cL();\n        const folder = gui.addFolder("Emitter");\n        folder.open();\n        NebulaGUI.initEmitterPosition(folder, [this.emitter]);\n        NebulaGUI.initEmitterRate(folder, [this.emitter]);\n        NebulaGUI.initRange(folder, [this.emitter.rangeInitializer]);\n        NebulaGUI.initRadius(folder, [this.emitter.radiusInitializer]);\n        NebulaGUI.initLife(folder, [this.emitter.lifeInitializer]);\n        const folderBehaviour = gui.addFolder("Behaviour");\n        NebulaGUI.initAlpha(folderBehaviour, [this.emitter.alphaBehaviour]);\n        NebulaGUI.initScale(folderBehaviour, [this.emitter.scaleBehaviour]);\n        NebulaGUI.initColor(folderBehaviour, [this.emitter.colorBehaviour]);\n        folderBehaviour.open();\n    }\n}\nStudy.W = 640;\nStudy.H = 480;\nwindow.onload = () => {\n    const study = new Study();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8855\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var s=1/0;for(L=0;L<deferred.length;L++){for(var[U,F,B]=deferred[L],x=!0,n=0;n<U.length;n++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[n])))?U.splice(n--,1):(x=!1,B<s&&(s=B));if(x){deferred.splice(L--,1);var e=F();void 0!==e&&(Q=e)}}return Q}B=B||0;for(var L=deferred.length;L>0&&deferred[L-1][2]>B;L--)deferred[L]=deferred[L-1];deferred[L]=[U,F,B]},__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),__webpack_require__.j=883,(()=>{var Q={883:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,s,[x,n,e]=F,L=0;if(x.some((U=>0!==Q[U]))){for(B in n)__webpack_require__.o(n,B)&&(__webpack_require__.m[B]=n[B]);if(e)var I=e(__webpack_require__)}for(U&&U(F);L<x.length;L++)s=x[L],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(I)},F=self.webpackChunkthreejs_lab=self.webpackChunkthreejs_lab||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[121],(()=>__webpack_require__(8855)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();